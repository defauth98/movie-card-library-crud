{"version":3,"sources":["components/Loading/Loading.js","components/MovieForm/MovieForm.js","components/MovieCard/MovieCard.js","services/movieData.js","services/movieAPI.js","pages/EditMovie/EditMovie.js","pages/MovieDetails/MovieDetails.js","pages/MovieList/MovieList.js","pages/NewMovie/NewMovie.js","pages/NotFound/NotFound.js","App.js","serviceWorker.js","index.js"],"names":["Loading","className","type","color","height","width","MovieForm","props","state","movie","handleSubmit","bind","onSubmit","this","field","newValue","setState","title","htmlFor","placeholder","id","value","onChange","event","updateMovie","target","subtitle","imagePath","storyline","genre","rating","step","min","max","Number","onClick","renderTitleInput","renderSubtitleInput","renderImagePathInput","renderStorylineInput","renderGenreSelection","renderRatingInput","renderSubmitButton","React","Component","MovieCard","data-testid","src","alt","to","movies","bookmarked","localStorage","setItem","JSON","stringify","data","readMovies","parse","getItem","saveMovies","simulateRequest","response","callback","setTimeout","getMovie","movieId","find","mov","parseInt","Promise","resolve","updatedMovie","map","createMovie","movieData","nextId","length","newMovie","deleteMovie","filter","status","EditMovie","shouldRedirect","a","movieAPI","match","params","MovieDetails","loading","handleDelete","MovieList","getMovies","page","index","key","renderMovies","NewMovie","NotFound","App","exact","path","component","render","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8824b0aa.chunk.js","sourcesContent":["import React from 'react';\nimport ReactLoading from 'react-loading';\n\nimport './loading.css'\n\nconst Loading = () => (\n  <div className=\"loading-container\">\n    <ReactLoading type=\"spin\" color=\"white\" height={ 60 } width={ 60 } />\n  </div>\n);\n\nexport default Loading;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './movieForm.css'\n\nclass MovieForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { ...props.movie };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit() {\n    const { onSubmit } = this.props;\n    onSubmit(this.state);\n  }\n\n  updateMovie(field, newValue) {\n    this.setState({ [field]: newValue });\n  }\n\n  renderTitleInput() {\n    const { title } = this.state;\n\n    return (\n      <div className=\"form-field\">\n        <label htmlFor=\"movie_title\">\n          Título\n          <br />\n          <input\n            placeholder=\"Insira o título\"\n            id=\"movie_title\"\n            type=\"text\"\n            className=\"validate\"\n            value={ title }\n            onChange={ (event) => this.updateMovie('title', event.target.value) }\n          />\n        </label>\n      </div>\n    );\n  }\n\n  renderSubtitleInput() {\n    const { subtitle } = this.state;\n\n    return (\n      <div className=\"form-field\">\n        <label htmlFor=\"movie_subtitle\">\n          Subtítulo\n\n          <input\n            placeholder=\"Insira o subtítulo\"\n            id=\"movie_subtitle\"\n            type=\"text\"\n            value={ subtitle }\n            onChange={ (event) => this.updateMovie('subtitle', event.target.value) }\n          />\n\n        </label>\n      </div>\n    );\n  }\n\n  renderImagePathInput() {\n    const { imagePath } = this.state;\n\n    return (\n      <div className=\"row form-field\">\n        <label htmlFor=\"movie_image\">\n          Imagem\n\n          <input\n            placeholder=\"Insira o caminho da imagem\"\n            id=\"movie_image\"\n            type=\"text\"\n            value={ imagePath }\n            onChange={ (event) => this.updateMovie('imagePath', event.target.value) }\n          />\n\n        </label>\n      </div>\n    );\n  }\n\n  renderStorylineInput() {\n    const { storyline } = this.state;\n\n    return (\n      <div className=\"form-field\">\n        <label htmlFor=\"movie_storyline\">\n          Sinopse\n          <br />\n          <textarea\n            id=\"movie_storyline\"\n            value={ storyline }\n            onChange={ (event) => this.updateMovie('storyline', event.target.value) }\n          />\n\n        </label>\n      </div>\n    );\n  }\n\n  renderGenreSelection() {\n    const { genre } = this.state;\n\n    return (\n      <div className=\"form-field\">\n        <label htmlFor=\"movie_genre\">\n          Gênero\n          <br />\n          <select\n            id=\"movie_genre\"\n            value={ genre }\n            onChange={ (event) => this.updateMovie('genre', event.target.value) }\n          >\n            <option value=\"action\">Ação</option>\n            <option value=\"comedy\">Comédia</option>\n            <option value=\"thriller\">Suspense</option>\n            <option value=\"fantasy\">Fantasia</option>\n          </select>\n        </label>\n      </div>\n    );\n  }\n\n  renderRatingInput() {\n    const { rating } = this.state;\n    return (\n      <div className=\"form-field\">\n        <label htmlFor=\"movie_rating\">\n          Avaliação\n          <input\n            placeholder=\"Dê a avaliação do filme\"\n            id=\"movie_rating\"\n            type=\"number\"\n            step={ 0.1 }\n            min={ 0 }\n            max={ 5 }\n            value={ rating }\n            onChange={ (event) => this.updateMovie('rating', Number(event.target.value)) }\n          />\n\n        </label>\n      </div>\n    );\n  }\n\n  renderSubmitButton() {\n    return (\n      <div id=\"button-container\">\n        <button\n          type=\"button\"\n          onClick={ this.handleSubmit }\n        >\n          Submit\n        </button>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <form>\n          {this.renderTitleInput()}\n          {this.renderSubtitleInput()}\n          {this.renderImagePathInput()}\n          {this.renderStorylineInput()}\n          {this.renderGenreSelection()}\n          {this.renderRatingInput()}\n          {this.renderSubmitButton()}\n        </form>\n      </div>\n    );\n  }\n}\n\nMovieForm.propTypes = {\n  movie: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    subtitle: PropTypes.string.isRequired,\n    storyline: PropTypes.string.isRequired,\n    imagePath: PropTypes.string.isRequired,\n    genre: PropTypes.string.isRequired,\n    rating: PropTypes.number.isRequired,\n  }).isRequired,\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default MovieForm;\n","import React from 'react';\n\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport './movieCard.css'\n\nclass MovieCard extends React.Component {\n  render() {\n    const { movie } = this.props;\n    const { id, title, subtitle, imagePath } = movie;\n\n    return (\n      <div data-testid=\"movie-card\" className=\"movie-card\">\n        <img src={ imagePath } alt={ title } />\n        <div className=\"card-info\">\n          <h2>{ title }</h2>\n          <h1>{ subtitle }</h1>\n          <div className=\"link-container\">\n            <Link to={ `/movies/${id}` }>VER DETALHES</Link>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nMovieCard.propTypes = {\n  movie: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    subtitle: PropTypes.string.isRequired,\n    imagePath: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport default MovieCard;\n","const movies = [\n  {\n    id: 1,\n    title: 'Kingsglaive',\n    subtitle: 'Final Fantasy XV',\n    storyline: \"King Regis, who oversees the land of Lucis, commands his army of soldiers to protect the kingdom from the Niflheim empire's plans to steal the sacred crystal.\",\n    rating: 4.5,\n    imagePath: 'images/Kingsglaive_Final_Fantasy_XV.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 2,\n    title: 'Final Fantasy',\n    subtitle: 'Spirits Within',\n    storyline: 'A scientist makes a last stand on Earth with the help of a ragtag team of soldiers against an invasion of alien phantoms.',\n    rating: 4.5,\n    imagePath: 'images/Final_Fantasy_Spirits_Within.jpg',\n    bookmarked: false,\n    genre: 'fantasy',\n  },\n  {\n    id: 3,\n    title: 'Ghost In The Shell',\n    subtitle: 'Ghost In The Shell',\n    storyline: 'A hacker known as the Puppet Master is hunted by a female cyborg cop and her partner. This film is a revised version of Ghost in the Shell (1995).',\n    rating: 5,\n    imagePath: 'images/Ghost_In_The_Shell_2_0.jpg',\n    bookmarked: false,\n    genre: 'comedy',\n  },\n  {\n    id: 4,\n    title: 'Appleseed Alpha',\n    subtitle: 'Appleseed Alpha',\n    storyline: \"A young female soldier Deunan and her cyborg partner Briareos survive through the post World War 3 apocalyptic New York in search of human's future hope, the legendary city of Olympus.\",\n    rating: 3.8,\n    imagePath: 'images/Appleseed_Alpha.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 5,\n    title: 'Resident Evil',\n    subtitle: 'Vendetta',\n    storyline: 'Chris Redfield enlists the help of Leon S. Kennedy and Rebecca Chambers to stop a death merchant, with a vengeance, from spreading a deadly virus in New York.',\n    rating: 4.2,\n    imagePath: 'images/Resident_Evil_Vendetta.jpg',\n    bookmarked: true,\n    genre: 'fantasy',\n  },\n  {\n    id: 6,\n    title: 'Velozes e Furiosos',\n    subtitle: 'Velozes e Furiosos 9',\n    storyline: 'O longa vem dando continuidade às corridas eletrizantes da equipe de amigos liderada por Dominic Toretto.',\n    rating: 5,\n    imagePath: 'https://br.web.img3.acsta.net/newsv7/21/08/18/16/43/1171723.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n];\n\nexport default movies;\n","import data from './movieData';\n\nlocalStorage.setItem('movies', JSON.stringify(data));\n\nconst readMovies = () => JSON.parse(localStorage.getItem('movies'));\nconst saveMovies = (movies) => localStorage.setItem('movies', JSON.stringify(movies));\n\nconst TIMEOUT = 2000;\nconst SUCCESS_STATUS = 'OK';\n\n// --------------------------------------------------------------------\n// A função simulateRequest simula uma requisição para uma API externa\n// Esse tipo de função que \"chama outra função\" é chamada de\n// \"currying function\" https://javascript.info/currying-partials\n// não se preocupe, estudaremos isso mais futuramente\n// --------------------------------------------------------------------\n\nconst simulateRequest = (response) => (callback) => {\n  setTimeout(() => {\n    callback(response);\n  }, TIMEOUT);\n};\n\nexport const getMovies = () => (\n  new Promise((resolve) => {\n    const movies = readMovies();\n    simulateRequest(movies)(resolve);\n  })\n);\n\nexport const getMovie = (movieId) => {\n  const movie = readMovies().find((mov) => mov.id === parseInt(movieId, 10));\n  return new Promise((resolve) => {\n    simulateRequest(movie)(resolve);\n  });\n};\n\nexport const updateMovie = (updatedMovie) => (\n  new Promise((resolve) => {\n    const movies = readMovies().map((movie) => {\n      if (movie.id === parseInt(updatedMovie.id, 10)) {\n        return { ...movie, ...updatedMovie };\n      }\n      return movie;\n    });\n    saveMovies(movies);\n    simulateRequest(SUCCESS_STATUS)(resolve);\n  })\n);\n\nexport const createMovie = (movieData) => (\n  new Promise((resolve) => {\n    let movies = readMovies();\n    const nextId = movies[movies.length - 1].id + 1;\n    const newMovie = { ...movieData, id: nextId };\n    movies = [...movies, newMovie];\n    saveMovies(movies);\n    simulateRequest(SUCCESS_STATUS)(resolve);\n  })\n);\n\nexport const deleteMovie = (movieId) => {\n  let movies = readMovies();\n  movies = movies.filter((movie) => movie.id !== parseInt(movieId, 10));\n  saveMovies(movies);\n\n  return new Promise((resolve) => {\n    simulateRequest({ status: SUCCESS_STATUS })(resolve);\n  });\n};\n","import React, { Component } from 'react';\nimport { Redirect } from 'react-router';\n\nimport PropTypes from 'prop-types';\nimport { Loading, MovieForm } from '../../components';\nimport * as movieAPI from '../../services/movieAPI';\n\nimport './editMovie.css';\n\nclass EditMovie extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      movie: '',\n      shouldRedirect: false,\n      status: 'loading',\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.getMovie = this.getMovie.bind(this);\n  }\n\n  componentDidMount() {\n    this.getMovie();\n  }\n\n  async handleSubmit(updatedMovie) {\n    await movieAPI.updateMovie(updatedMovie);\n\n    this.setState({ shouldRedirect: true });\n  }\n\n  async getMovie() {\n    const { match } = this.props;\n    const { params } = match;\n\n    const movie = await movieAPI.getMovie(params.id);\n\n    this.setState({ movie, status: '' });\n  }\n\n  render() {\n    const { status, shouldRedirect, movie } = this.state;\n\n    if (shouldRedirect) {\n      return <Redirect to=\"/\" />;\n    }\n\n    if (status === 'loading') {\n      return <Loading />;\n    }\n\n    return (\n      <div data-testid=\"edit-movie\" id=\"edit-movie-container\">\n        <div id=\"edit-movie-content\">\n          <h1>Editar filme</h1>\n          <MovieForm movie={ movie } onSubmit={ this.handleSubmit } />\n        </div>\n      </div>\n    );\n  }\n}\n\nEditMovie.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.string.isRequired }),\n  }).isRequired,\n};\n\nexport default EditMovie;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Link } from 'react-router-dom';\n\nimport * as movieAPI from '../../services/movieAPI';\n\nimport { Loading } from '../../components';\n\nimport './movieDetail.css';\n\nclass MovieDetails extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getMovie = this.getMovie.bind(this);\n\n    this.state = {\n      movie: [],\n      loading: true,\n    };\n  }\n\n  componentDidMount() {\n    this.getMovie();\n  }\n\n  async handleDelete(id) {\n    await movieAPI.deleteMovie(id);\n  }\n\n  async getMovie() {\n    const { match } = this.props;\n    const { params } = match;\n    const movie = await movieAPI.getMovie(params.id);\n\n    this.setState({ movie, loading: false });\n  }\n\n  render() {\n    const { movie, loading } = this.state;\n\n    if (loading) return <Loading />;\n\n    const { id, title, storyline, imagePath, genre, rating, subtitle } = movie;\n\n    return (\n      <div data-testid=\"movie-details\" id=\"movie-container\">\n        <div id=\"movie\">\n          <img alt=\"Movie Cover\" src={ `${imagePath}` } />\n          <div className=\"movie-info\">\n            <h1>{`Title: ${title}`}</h1>\n            <p>{ `Subtitle: ${subtitle}` }</p>\n            <p>{ `Storyline: ${storyline}` }</p>\n            <p>{ `Genre: ${genre}` }</p>\n            <p>{ `Rating: ${rating}` }</p>\n          </div>\n\n          <div id=\"movie-buttons\">\n            <Link to=\"/\">VOLTAR</Link>\n            <Link to={ `/movies/${id}/edit` }>EDITAR</Link>\n            <Link to=\"/\" onClick={ () => this.handleDelete(id) }>DELETAR</Link>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nMovieDetails.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.string.isRequired,\n    }),\n  }).isRequired,\n};\n\nexport default MovieDetails;\n","import React, { Component } from 'react';\n\nimport { Link } from 'react-router-dom';\nimport { Loading, MovieCard } from '../../components';\n\nimport * as movieAPI from '../../services/movieAPI';\n\nimport './movieList.css'\n\nconst FILMS_BY_LINE = 5;\n\nclass MovieList extends Component {\n  constructor() {\n    super();\n\n    this.getMovies = this.getMovies.bind(this);\n\n    this.state = {\n      movies: [],\n    };\n  }\n\n  componentDidMount() {\n    this.getMovies();\n  }\n\n  async getMovies() {\n    const response = await movieAPI.getMovies();\n\n    this.setState({ movies: response });\n  }\n\n  renderMovies(movies, page) {\n    return (\n      <div id=\"movies\">\n\n        { movies.map((movie, index) => {\n          const initialIndex = FILMS_BY_LINE * (page - 1);\n          const lastIndex = page * FILMS_BY_LINE - 1;\n\n          if (index >= initialIndex && index <= lastIndex) {\n            return <MovieCard key={ movie.title } movie={ movie } />;\n          }\n\n          return null;\n        }) }\n      </div>\n    );\n  }\n\n  render() {\n    const { movies } = this.state;\n\n    if (movies.length === 0) {\n      return <Loading />;\n    }\n\n    return (\n      <div data-testid=\"movie-list\" id=\"movie-list\">\n        <header>\n          <h1>My Movie Library</h1>\n\n          {movies.length > 1 && (\n            <Link\n              to=\"/movies/new\"\n              id=\"add-button\"\n            >\n              ADICIONAR FILME\n            </Link>\n          )}\n        </header>\n\n        <main>\n          <h3>Destaques</h3>\n          { movies.length > 1 && this.renderMovies(movies, 1) }\n\n          <h3>Recem adicionados</h3>\n          { movies.length > 1 && this.renderMovies(movies, 2) }\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default MovieList;\n","import React, { Component } from 'react';\nimport { Redirect } from 'react-router';\n\nimport { MovieForm } from '../../components';\nimport * as movieAPI from '../../services/movieAPI';\n\nimport './newMovie.css';\n\nclass NewMovie extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      shouldRedirect: false,\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  async handleSubmit(newMovie) {\n    await movieAPI.createMovie(newMovie);\n\n    this.setState({ shouldRedirect: true });\n  }\n\n  render() {\n    const { shouldRedirect } = this.state;\n\n    if (shouldRedirect) {\n      return <Redirect to=\"/\" />;\n    }\n\n    return (\n      <div data-testid=\"new-movie\" id=\"new-movie\">\n        <div id=\"new-movie-content\">\n          <h1>Adicionar filme</h1>\n          <MovieForm onSubmit={ this.handleSubmit } />\n        </div>\n\n      </div>\n    );\n  }\n}\nexport default NewMovie;\n","import React, { Component } from 'react';\n\nimport './notFound.css'\n\nclass NotFound extends Component {\n  render() {\n    return (\n      <div data-testid=\"404-error\" id=\"not-found\">\n        <h3>Not Found - 404</h3>\n        <br />\n        <strong>Página não foi encontrada :/</strong>\n      </div>);\n  }\n}\n\nexport default NotFound;\n","import React from 'react';\nimport { Route, Switch, HashRouter } from 'react-router-dom';\n\nimport {MovieList, MovieDetails, NewMovie, EditMovie, NotFound} from './pages';\n\nimport './styles/global.css';\n\nfunction App() {\n  return (\n    <HashRouter>\n      <Switch>\n        <Route exact path=\"/\" component={ MovieList } />\n        <Route path=\"/movies/new\" component={ NewMovie } />\n        <Route\n          path=\"/movies/:id\"\n          render={ (props) => <MovieDetails { ...props } /> }\n          exact\n        />\n        <Route\n          path=\"/movies/:id/edit\"\n          render={ (props) => <EditMovie { ...props } /> }\n        />\n        <Route component={ NotFound } />\n      </Switch>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}